import re
import os
import tempfile
from pathlib import Path
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from faster_whisper import WhisperModel
from pydub import AudioSegment

from services.database import add_expense
from services.parser import parse_expense_text
from states import ExpenseConversation

router = Router()

# –ú–æ–¥–µ–ª—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –∑–¥–µ—Å—å)
model = WhisperModel("medium", device="cpu", compute_type="int8")

@router.message(Command("expense"))
async def add_expense_handler(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /expense, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä.
    """
    parsed_data = parse_expense_text(message.text)
    
    if parsed_data:
        amount, category = parsed_data
        add_expense(amount=amount, category=category)
        await message.answer(f"‚úÖ –†–∞—Å—Ö–æ–¥ –Ω–∞ —Å—É–º–º—É **{amount:.2f}** –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ **'{category}'** —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –ø–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω–µ—Ç None
        await message.answer(
            "‚ùå **–û—à–∏–±–∫–∞!** –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/expense <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>`\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `/expense 500 –û–±–µ–¥`"
        )

@router.message(ExpenseConversation.waiting_for_amounts, F.voice)
async def handle_amounts_voice(message: Message, state: FSMContext, bot):
    """
    Handles the voice message with amounts for the multi-step expense entry.
    """
    await message.answer("üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é —Å—É–º–º—ã...")

    # --- –ë–ª–æ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ voice_handlers.py) ---
    voice_dir = Path(tempfile.gettempdir()) / "secretary_bot_voices"
    voice_dir.mkdir(exist_ok=True)
    voice_file_info = await bot.get_file(message.voice.file_id)
    voice_oga_path = voice_dir / f"{message.voice.file_id}.oga"
    await bot.download_file(voice_file_info.file_path, destination=voice_oga_path)
    voice_wav_path = voice_dir / f"{message.voice.file_id}.wav"
    AudioSegment.from_file(voice_oga_path).export(voice_wav_path, format="wav")

    try:
        segments, _ = model.transcribe(str(voice_wav_path), beam_size=5, language="ru")
        recognized_text = "".join(segment.text for segment in segments).strip()

        if not recognized_text:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        # --- –õ–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É–º–º –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ---
        # –ò—â–µ–º –≤—Å–µ —á–∏—Å–ª–∞ –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
        amounts = [float(num) for num in re.findall(r'\d+(?:\.\d+)?', recognized_text)]

        user_data = await state.get_data()
        dates = user_data.get("dates", [])
        category = user_data.get("category")

        if len(amounts) != len(dates):
            await message.answer(
                f"–Ø –æ–∂–∏–¥–∞–ª {len(dates)} —Å—É–º–º, –Ω–æ –≤—ã –Ω–∞–∑–≤–∞–ª–∏ {len(amounts)}. "
                "–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–æ–≤–∏—Ç–µ —Å—É–º–º—ã –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã."
            )
            # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—â–µ –ø–æ–ø—ã—Ç–∫—É
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã
        for i, date_str in enumerate(dates):
            # –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º, –∞ –Ω–µ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π.
            # –≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º—ã –ë–î, –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è.
            # –ü–æ–∫–∞ —á—Ç–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º —á–∏—Å–ª–æ–º.
            add_expense(amount=amounts[i], category=f"{category} ({date_str})")

        await message.answer(
            f"‚úÖ –ì–æ—Ç–æ–≤–æ! –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª {len(amounts)} –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'."
        )

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º: {e}")
    finally:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        await state.clear()
        os.remove(voice_oga_path)
        os.remove(voice_wav_path)